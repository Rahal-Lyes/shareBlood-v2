// Permet de changer une propriété CSS selon le thème
@mixin themed($property, $light-value, $dark-value) {
  .v-theme--light {
    #{$property}: $light-value;
  }

  .v-theme--dark {
    #{$property}: $dark-value;
  }
}

// Exemple : hover avec effet before (optionnel)
@mixin before-pseudo() {
  position: relative;

  &::before {
    position: absolute;
    background: currentcolor;
    block-size: 100%;
    border-radius: inherit;
    content: "";
    inline-size: 100%;
    inset: 0;
    opacity: 0;
    pointer-events: none;
  }
}
@mixin light-bg-provider($component, $inner-selector: "", $opacity: 0.12) {
  .#{$component}.#{$component}-light-bg #{$inner-selector} {
    background-color: transparent !important;

    &.bg-static-white {
      background-color: white !important;
    }

    &::before {
      position: absolute;
      background-color: currentcolor;
      border-radius: inherit;
      content: "";
      inset: 0;
      opacity: $opacity;
      pointer-events: none;
    }
  }
}

.custom-element {
  background-color: var(--v-theme-primary-blue);
  color: var(--v-theme-grey-50);
}

.my-component {
  background-color: var(--v-theme-background);
  color: var(--v-theme-on-background);
  border: 1px solid var(--v-theme-primary);
}


/// Mixin qui applique une couleur Vuetify avec opacité
/// @param $css-var-name Le nom de la variable CSS (ex: 'background', 'primary')
/// @param $opacity Le niveau d'opacité entre 0 et 1
@mixin color-opacity($css-var-name, $opacity: 1) {
  background-color: rgba(var(--v-theme-#{$css-var-name}), #{$opacity});
}


@mixin nav-spacing($horizontal: var(--custom-spacing-horizontal), $vertical: 1rem) {
  padding: $vertical $horizontal;
}

@mixin flex-center($direction: row, $gap: 0) {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: $direction;
  gap: $gap;
}

@mixin flex-between($gap: 0) {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: $gap;
}

@mixin text-truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin transition-smooth($property: all, $duration: 0.3s, $timing: ease-in-out) {
  transition: $property $duration $timing;
}

@mixin border-radius($radius: 8px) {
  border-radius: $radius;
}

@mixin hover-elevation($elevation: 2) {
  @include transition-smooth(box-shadow);
  &:hover {
    box-shadow: 0 #{$elevation * 2}px #{$elevation * 4}px rgba(var(--v-theme-on-surface), 0.12);
  }
}

@mixin gradient-background($color1, $color2, $angle: 135deg) {
  background: linear-gradient($angle, $color1, $color2);
}

@mixin glass-effect($opacity: 0.1) {
  backdrop-filter: blur(10px);
  background: rgba(var(--v-theme-surface), $opacity);
  border: 1px solid rgba(var(--v-theme-on-surface), 0.08);
}